// Generated by CoffeeScript 1.6.2
(function() {
  var Main;

  Main = (function() {
    function Main() {
      var _this = this;

      this.$window = $(window);
      this.$body = $(document.body);
      this.$header = $('#js-header');
      this.$headerSection = $('#js-header-section');
      this.$services = $('.service-b').first();
      this.$abouts = $('.about-b').first();
      this.$pageJumps = $('.page-jump-e');
      this.$menu = $('#js-menu');
      this.$mainLogo = $('#js-main-logo');
      this.$bodyHtml = $('body,html');
      this.POPUP_OFFSET = 49;
      this.POPUP_HEADER_OFFSET = 60;
      this.CLICK_EVENT = $.isFunction($.fn.tap) ? 'tap' : 'click';
      this.$greenBtn = $('.js-green-btn');
      this.$blueBtn = $('.js-blue-btn');
      this.$redBtn = $('.js-red-btn');
      this.$greenPopup = $('#js-green-popup');
      this.$bluePopup = $('#js-blue-popup');
      this.$redPopup = $('#js-red-popup');
      this.$popupSpacer = $('#js-popup-spacer');
      this.servicesAnimated = [];
      this.aboutsAnimated = [];
      this.listenToScroll();
      this.listenToPopups();
      this.listenMenu();
      this.$body.on(this.CLICK_EVENT, function() {
        return _this.hidePopup();
      });
      this.normalHeader = {
        animate: {
          'top': 0,
          'opacity': 1
        },
        css: {
          'position': 'fixed',
          'top': -this.$header.outerHeight(),
          'opacity': 0
        }
      };
      this.fixedHeader = {
        animate: {
          'top': -this.$header.outerHeight(),
          'opacity': 0
        },
        css: {
          'top': 0,
          'position': 'absolute',
          'opacity': 1
        }
      };
    }

    Main.prototype.listenToPopups = function() {
      var _this = this;

      this.$greenBtn.on(this.CLICK_EVENT, function(e) {
        e.stopPropagation();
        return _this.showPopup(_this.$greenPopup, e);
      });
      this.$blueBtn.on(this.CLICK_EVENT, function(e) {
        e.stopPropagation();
        return _this.showPopup(_this.$bluePopup, e);
      });
      this.$redBtn.on(this.CLICK_EVENT, function(e) {
        e.stopPropagation();
        return _this.showPopup(_this.$redPopup, e);
      });
      this.$window.on('throttledresize', _.bind(this.positPopup, this));
      return this.$mainLogo.on(this.CLICK_EVENT, function(e) {
        _this.$bodyHtml.animate({
          'scrollTop': 0
        }, 750);
        return false;
      });
    };

    Main.prototype.showPopup = function($popup, e) {
      var $target, _ref,
        _this = this;

      if ((_ref = this.$currentPopup) != null) {
        _ref.hide();
      }
      $target = $(e.target);
      this.$currentPopup = $popup.fadeIn();
      this.$currentPopup.data({
        '$target': $target
      });
      this.positPopup();
      if (!$popup.data().closeHandler) {
        $popup.find('#js-close').on(this.CLICK_EVENT, function() {
          $popup.data({
            'closeHandler': true
          });
          return _this.hidePopup();
        });
        $popup.on(this.CLICK_EVENT, function(e) {
          return e.stopPropagation();
        });
      }
      this.$bodyHtml.animate({
        'scrollTop': $popup.offset().top - this.POPUP_OFFSET - this.POPUP_HEADER_OFFSET
      });
      return this.$popupSpacer.css({
        'height': $popup.outerHeight()
      });
    };

    Main.prototype.positPopup = function() {
      var $target;

      if (!this.$currentPopup) {
        return;
      }
      $target = this.$currentPopup.data().$target;
      return this.$currentPopup.css({
        top: $target.position().top + 2 * $target.outerHeight() + this.POPUP_OFFSET
      });
    };

    Main.prototype.hidePopup = function(speed) {
      var _ref,
        _this = this;

      if (speed == null) {
        speed = 'fast';
      }
      if ((_ref = this.$currentPopup) != null) {
        _ref.fadeOut(speed, function() {
          _this.$currentPopup = null;
          return _this.$window.trigger('scroll');
        });
      }
      return this.$popupSpacer.css({
        'height': 0
      });
    };

    Main.prototype.listenToScroll = function() {
      this.currState = false;
      this.$window.on('scroll', _.bind(this.scroll, this));
      return this.$window.trigger('scroll');
    };

    Main.prototype.listenMenu = function() {
      var _this = this;

      return this.$menu.on('click', 'a', function(e) {
        _this.hidePopup();
        e.preventDefault();
        return _this.scrollToSection($(e.target).attr('href'));
      });
    };

    Main.prototype.scrollToSection = function(selector) {
      return this.$bodyHtml.animate({
        'scrollTop': $(selector).offset().top
      });
    };

    Main.prototype.scroll = function(e) {
      this.showHeader(this.$window.scrollTop() >= this.$headerSection.outerHeight());
      if (!this.servicesAnimated[0]) {
        this.animateBlocks({
          state: (this.$window.scrollTop() + this.$window.outerHeight()) >= this.$services.offset().top + (this.$window.outerHeight() / 5),
          delay: 200,
          selector: '.service-b',
          lock: this.servicesAnimated,
          animation: 'fadeInLeft'
        });
      }
      if (!this.aboutsAnimated[0]) {
        this.animateBlocks({
          state: (this.$window.scrollTop() + this.$window.outerHeight()) >= this.$abouts.offset().top + (this.$window.outerHeight() / 5),
          delay: 100,
          selector: '.about-b',
          lock: this.aboutsAnimated,
          animation: 'fadeInDown'
        });
      }
      return this.checkMenu();
    };

    Main.prototype.checkMenu = function() {
      var i, _i, _ref;

      this.currJump = this.$pageJumps.eq(0);
      for (i = _i = 0, _ref = this.$pageJumps.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.$window.scrollTop() >= this.$pageJumps.eq(i).position().top - (this.$window.outerHeight() / 2)) {
          this.currJump = this.$pageJumps.eq(i);
        }
        if (this.$window.scrollTop() < this.POPUP_OFFSET) {
          this.currJump = this.$pageJumps.eq(0);
        }
        if (this.$window.scrollTop() >= this.$bodyHtml.outerHeight() - this.$window.outerHeight()) {
          this.currJump = this.$pageJumps.eq(this.$pageJumps.length - 1);
        }
      }
      return this.checkMenuItem(this.currJump);
    };

    Main.prototype.checkMenuItem = function($item) {
      var menuId;

      menuId = $item.attr('id');
      return this.$menu.find("a[href=\"#" + menuId + "\"]").addClass('is-active').siblings().removeClass('is-active');
    };

    Main.prototype.showHeader = function(state) {
      var _this = this;

      if (state && (state !== this.currState)) {
        this.currState = state;
        this.$header.css(this.normalHeader.css).addClass('is-fixed').stop().animate(this.normalHeader.animate);
      }
      if (!state && (state !== this.currState)) {
        this.currState = state;
        return this.$header.stop().animate(this.fixedHeader.animate, 200, function() {
          _this.$header.css(_this.fixedHeader.css);
          return _this.$header.removeClass('is-fixed');
        });
      }
    };

    Main.prototype.animateBlocks = function(o) {
      if (o.state) {
        this.makeChain({
          $els: $(o.selector),
          delay: o.delay,
          animation: o.animation
        });
        return o.lock[0] = true;
      }
    };

    Main.prototype.makeChain = function(o) {
      var _ref,
        _this = this;

      if ((_ref = o.i) == null) {
        o.i = 0;
      }
      if (o.i === o.$els.length) {
        return;
      }
      return this.animate(o.$els[o.i], o).then(function() {
        return _this.makeChain({
          $els: o.$els,
          i: ++o.i,
          delay: o.delay,
          animation: o.animation
        });
      });
    };

    Main.prototype.animate = function(el, o) {
      var dfr,
        _this = this;

      dfr = new $.Deferred;
      if (Modernizr.cssanimations) {
        $(el).addClass("animated " + o.animation);
      } else {
        $(el).animate({
          'opacity': 1
        });
      }
      setTimeout(function() {
        return dfr.resolve();
      }, o.delay);
      return dfr.promise();
    };

    return Main;

  })();

  new Main;

}).call(this);
